<?xml version="1.0" encoding="utf-8"?>
<topic id="0de8785c-999d-421b-8fb7-be074c5e1f61" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>The KerbalData API allows quick access to all of your KSP data with only a few lines of code. Simply create reference in your project to the KerbalData.dll and you are off to go. </para>
    </introduction>
    <procedure>
      <title>Quick Start frfr</title>
      <steps class="ordered">
        <step>
          <content>
            <para>The first step to using KerbalData is to add the reference to KerbalData to your project, this process varies depending on your heees. Be sure to select the correct version of KerbalData for your application environment. The Release package for KerbalData contains versions of KerbalData.dll for the following platforms:</para>
            <list class="bullet">
              <listItem>
                <para>.NET 4.5</para>
              </listItem>
              <listItem>
                <para>.NET 4</para>
              </listItem>
              <listItem>
                <para>.NET 3.5</para>
              </listItem>
              <listItem>
                <para>Mono 2.10.x</para>
              </listItem>
            </list>
          </content>
        </step>
        <step>
          <content>
            <para>Once the correct project reference is set simply add the following namespaces to any codefile you want KerbalData access to.</para>
            <code language="c#" region="en-us" title="Adding KerbalData Namespaces">
              // Base Namespace required for ALL usage of KerbalData
              using KerbalData;

              // The Models namespace contains the loaded data models. This namespace is only needed when working with data
              // Not in classes that are only handling load/unload (like ViewModels in WPF)
              using KerbalData.Models;
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>With the right Namespaces in place write the code you need to access and maniupulate your data.</para>
            <code language="c#" region="en-us" title="Testing">
              // Use your own install path
              var kd = KerbalData.Create(@"C:\KSP");

              // Load a save file using the same short name provided in the game UI
              var sf = kd.Saves["testing"];

              // One of many helper methods, this one re-fills all ships
              sf.Game.FlightState.FillResources();

              // Setting the title of the save game, this will change in-game name display
              // (still need to wire in dir name change)
              sf.Game.Title = "I AM IRON MAN";

              // Another helper method, this clears all vessels marked as debris or unknown vessel types.
              sf.Game.FlightState.ClearDebris();

              // Grabbing a vessel from the game
              var sat =
              sf.Game.FlightState.Vessels.Where(v => v.Name.Contains("Beta Geo-Sat")).FirstOrDefault();

              // Changing the orbit (currently defaults to 100km above target)
              sat.Orbit.Change(Body.Bop);

              // Save file, includes data backup of original file
              sf.Save();
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>To load a single file use the KspData class from the Serialization namespace</para>
            <code language="c#" region="en-us" title="Testing">
              // Use your own install path
              var data = KspData.LoadKspFile(@"C:\my\file\location\filename.ext");

              // Load a save file using the same short name provided in the game UI
              var sf = kd.Saves["testing"];

              // One of many helper methods, this one re-fills all ships
              sf.Game.FlightState.FillResources();

              // Setting the title of the save game, this will change in-game name display
              // (still need to wire in dir name change)
              sf.Game.Title = "I AM IRON MAN";

              // Another helper method, this clears all vessels marked as debris or unknown vessel types.
              sf.Game.FlightState.ClearDebris();

              // Grabbing a vessel from the game
              var sat =
              sf.Game.FlightState.Vessels.Where(v => v.Name.Contains("Beta Geo-Sat")).FirstOrDefault();

              // Changing the orbit (currently defaults to 100km above target)
              sat.Orbit.Change(Body.Bop);

              // Save file, includes data backup of original file
              sf.Save();
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>Second step</para>
          </content>
        </step>        
      </steps>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>

    <!-- Optional additional procedure or section with procedure -->
    <section address="Section1">
      <title>Optional section title</title>
      <content>
        <procedure>
          <title>Procedure #2</title>
          <steps class="ordered">
            <step>
              <content>
                <para>First step</para>
              </content>
            </step>
            <step>
              <content>
                <para>Second step</para>
              </content>
            </step>
          </steps>
          <!-- <conclusion>Optional conclusion</conclusion> -->
        </procedure>
      </content>
    </section>

    <!-- Optional next steps info
    <nextSteps>
      <content><para>Next steps info goes here</para></content>
    </nextSteps>
    -->

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
