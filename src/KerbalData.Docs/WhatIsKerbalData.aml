<?xml version="1.0" encoding="utf-8"?>
<topic id="cdae3eed-1859-4b80-bdf4-dbf5367920fc" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <para>
        Want to write an external application to process KSP data but opened a file and found working with the data is a pain? Don't want to deal with upgrades breaking your application? Want to convert your KSP flight data to other useful formats?

        If you answered yes to any of these then the KerbalData API is for you. This simple C# API allows you quick and easy access to your KSP data files (save, craft, config and part) and allows you to manipulate and store that data back into KSP format (and eventually any format you like).

        This API allows developers to:
      </para>
      <list class="bullet">
        <listItem>
          <para>Load/Edit/Save KSP Save, Craft (both global and under a specific save), Part and game settings.</para>
        </listItem>
        <listItem>
          <para>Scan a KSP install for all available data files (and makes them available through a single line of code)</para>
        </listItem>
        <listItem>
          <para>Convert KSP data to/from JSON format (use the huge ecosystem JSON tools to manage your data)</para>
        </listItem>
        <listItem>
          <para>Manage, edit, save to/from JSON or KSP format</para>
        </listItem>
        <listItem>
          <para>De-serializes data into usable object structure</para>
        </listItem>
        <listItem>
          <para>Automatically backs up changed files, keeps a copy of original data to restore live object.</para>
        </listItem>
        <listItem>
          <para>Save Development Time : Time Savings</para>
        </listItem>
        <listItem>
          <para>Do simple popular actions</para>
        </listItem>
        <listItem>
          <para>Clear all debris and unknown items from a save</para>
        </listItem>
        <listItem>
          <para>Put any craft currently in game (on the pad or in orbit) in orbit around any body</para>
        </listItem>
        <listItem>
          <para>Refuel any or all craft in your save with a single command (fills any resource to max)</para>
        </listItem>
        <listItem>
          <para>more to come (looking for suggestions)...</para>
        </listItem>
      </list>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>Required introduction</para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Optional section title</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>Add one or more sections with content</para>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
