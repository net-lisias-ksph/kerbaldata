<?xml version="1.0" encoding="utf-8"?>
<topic id="c06151f4-76cc-475f-b48d-ced4dc1d3a16" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <autoOutline />

      <para>Loading Saving Importing and Exporting
      </para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="LoadSave">
      <title>Loading and Saving Data</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>The quickest and easiest way to load data is to point KerbalData at a KSP installation. When created KerbalData only scans the install path for 
        valid files to create name lists. Data is only loaded once a particular item is called for. Using KerbalData each object collection is accessible by a different property</para>
        <code>
          <![CDATA[
          var kd = KerbalData.Create("C:\games\ksp_win");
          
          var save = kd.Saves["mysave"];
          var scenario = kd.Scenarios["myscenario"];
          var trainingScenario = kd.TrainingScenarios["mytrainingscenario"];
          var vabCraft = kd.CraftInVab["myvabcraft"];
          var sphCraft = kd.CraftInSph["mysphcraft"];
          var part = kd.Parts["mypart"];
          var settings = kd.KspSettings["mysetting"];
          
          // To access craft for a particular save, access the properties under that save instance
          var saveVabCraft = save.CraftInVab["myvabcraft"];
          var saveSphCraft = save.CraftInSph["mysphcraft"];
          ]]>
        </code>
        <para>Saving data loaded from a KerbalData install only requires a call to the Save() method found on every storable data object (Saves, Craft, Part and Settings). 
        By default data is backed up to another file before being saved.</para>
        <code>
          <![CDATA[
          save.Save();
          scenario.Save();
          trainingScenario.Save();
          vabCraft.Save();
          sphCraft.Save();
          part.Save();
          settings.Save();
          saveVabCraft.Save();
          saveSphCraft.Save();
          
          // The save method accepts 2 parameters the first is a name, the second disables/enables backup. 
          // If a new name is provided the data and changes are copied to the new name, the old data remains
          save.Save("mynewsave");
          
          // Backup can be turned off by passing a false as the second parameter. If you don't wish to change the name, null must be passed.
          save.Save(null, false);
          ]]>
        </code>
        <para>To load single files the KspData class provides base methods for loading and saving KSP data. The models loaded from KSP data are the very same as 
        provided by KerbalData. Note that KspData requires you to tell the method what type you are loading so that the correct serilaizers are loaded. 
        </para>
        <code>
          <![CDATA[
          var save = KspData.LoadKspFile<SaveFile>(@"C:\games\ksp_win\saves\mysave\persistent.sfs");
          
          // Data in the save is accessed the same way as if it was loaded from KerbalData. It can also be saved 
          // using the same methods.
          
          save.Save(); // Saves any changes
          
          // Saves to a new file. Note: unlike when loaded through KerbalData, directories are not automatically created.
          save.Save(@"C:\games\ksp_win\saves\mysave\newpersistent.sfs"); 
          ]]> 
        </code>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>
    <section address="ImportExport">
      <title>Importing and Exporting Data</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>Importing an external file into a KSP installation requires an active KerbalData instance and a file loaded using KspData.
        </para>
        <code>
          <![CDATA[
          var kd = KerbalData.Create("C:\games\ksp_win");
          var saveToImport = KspData.LoadKspFile<SaveFile>(@"C:\downloads\customsave.sfs");
          
          // Add the loaded save into the Saves handler in KerbalData
          kd.Saves.Add("MyImportedSave", saveToImport);
          
          // The import file is now tied to KerbalData, Calling save will create a new directory
          // based on the name provided and save the file as persistent.sfs.
          saveToImport.Save();
          
          // The same process applies to any type of file
          // Note: Scenarios are treated as Save files for loading/serialization
          var scenarioToImport = KspData.LoadKspFile<SaveFile>(@"C:\downloads\customscenario.sfs");
          kd.Scenarios.Add("MyImportedScenario", scenarioToImport);
          scenarioToImport.Save();      
          
          var trainingToImport = KspData.LoadKspFile<SaveFile>(@"C:\downloads\customtraining.sfs");
          kd.TrainingScenario.Add("MyImportedTraining", trainingTooImport);
          trainingToImport.Save(); 
          
          var vabCraftToImport = KspData.LoadKspFile<CraftFile>(@"C:\downloads\customvabCraft.sfs");
          kd.CraftInVab.Add("MyImportedCraft", vabCraftToImport);
          vabCraftToImport.Save(); 
          
          var sphCraftToImport = KspData.LoadKspFile<CraftFile>(@"C:\downloads\customsphCraft.sfs");
          kd.CraftInSph.Add("MyImportedCraft", sphCraftToImport);
          sphCraftToImport.Save(); 
          
          var partToImport = KspData.LoadKspFile<PartFile>(@"C:\downloads\custompart.sfs");
          kd.Parts.Add("MyImportedPart", partToImport);
          partToImport.Save(); 
          
          var configToImport = KspData.LoadKspFile<ConfigFile>(@"C:\downloads\customconfig.sfs");
          kd.Scenarios.Add("MyImportedConfig", configToImport);
          configToImport.Save();           

          ]]>
        </code>
        <para>
          To export data from a KSP install use the KspData class to save data from a KerbalData object.
        </para>
        <code>
          <![CDATA[
          var kd = KerbalData.Create("C:\games\ksp_win");
          var craft = KerbalData.CraftInVab["mycraft"];
          
          // Note: There is no backup when using SaveFile
          KspData.SaveFile(@"C:\games\myexports\myexported.craft");
          ]]>
        </code>

      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
