//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KerbalData.Configuration
{
    
    
    /// <summary>
    /// The ApiConfig Configuration Section.
    /// </summary>
    public partial class ApiConfig : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the ApiConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ApiConfigSectionName = "kerbalData";
        
        /// <summary>
        /// Gets the ApiConfig instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::KerbalData.Configuration.ApiConfig Instance
        {
            get
            {
                return ((global::KerbalData.Configuration.ApiConfig)(global::System.Configuration.ConfigurationManager.GetSection(global::KerbalData.Configuration.ApiConfig.ApiConfigSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::KerbalData.Configuration.ApiConfig.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::KerbalData.Configuration.ApiConfig.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Processors Property
        /// <summary>
        /// The XML name of the <see cref="Processors"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ProcessorsPropertyName = "processors";
        
        /// <summary>
        /// Gets or sets the Processors.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Processors.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::KerbalData.Configuration.ApiConfig.ProcessorsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::KerbalData.Configuration.ProcessorsConfig Processors
        {
            get
            {
                return ((global::KerbalData.Configuration.ProcessorsConfig)(base[global::KerbalData.Configuration.ApiConfig.ProcessorsPropertyName]));
            }
            set
            {
                base[global::KerbalData.Configuration.ApiConfig.ProcessorsPropertyName] = value;
            }
        }
        #endregion
        
        #region Repositories Property
        /// <summary>
        /// The XML name of the <see cref="Repositories"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RepositoriesPropertyName = "repositories";
        
        /// <summary>
        /// Gets or sets the Repositories.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Repositories.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::KerbalData.Configuration.ApiConfig.RepositoriesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::KerbalData.Configuration.RepositoriesConfig Repositories
        {
            get
            {
                return ((global::KerbalData.Configuration.RepositoriesConfig)(base[global::KerbalData.Configuration.ApiConfig.RepositoriesPropertyName]));
            }
            set
            {
                base[global::KerbalData.Configuration.ApiConfig.RepositoriesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace KerbalData.Configuration
{
    
    
    /// <summary>
    /// A collection of ProcessorConfig instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::KerbalData.Configuration.ProcessorConfig), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::KerbalData.Configuration.ProcessorsConfig.ProcessorConfigPropertyName)]
    public partial class ProcessorsConfig : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::KerbalData.Configuration.ProcessorConfig"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ProcessorConfigPropertyName = "processor";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::KerbalData.Configuration.ProcessorsConfig.ProcessorConfigPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::KerbalData.Configuration.ProcessorsConfig.ProcessorConfigPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::KerbalData.Configuration.ProcessorConfig)(element)).Index;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::KerbalData.Configuration.ProcessorConfig"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::KerbalData.Configuration.ProcessorConfig"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::KerbalData.Configuration.ProcessorConfig();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::KerbalData.Configuration.ProcessorConfig"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::KerbalData.Configuration.ProcessorConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::KerbalData.Configuration.ProcessorConfig this[int index]
        {
            get
            {
                return ((global::KerbalData.Configuration.ProcessorConfig)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::KerbalData.Configuration.ProcessorConfig"/> with the specified key.
        /// </summary>
        /// <param name="index">The key of the <see cref="global::KerbalData.Configuration.ProcessorConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::KerbalData.Configuration.ProcessorConfig this[object index]
        {
            get
            {
                return ((global::KerbalData.Configuration.ProcessorConfig)(base.BaseGet(index)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::KerbalData.Configuration.ProcessorConfig"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="processor">The <see cref="global::KerbalData.Configuration.ProcessorConfig"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::KerbalData.Configuration.ProcessorConfig processor)
        {
            base.BaseAdd(processor);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::KerbalData.Configuration.ProcessorConfig"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="processor">The <see cref="global::KerbalData.Configuration.ProcessorConfig"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::KerbalData.Configuration.ProcessorConfig processor)
        {
            base.BaseRemove(this.GetElementKey(processor));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::KerbalData.Configuration.ProcessorConfig"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::KerbalData.Configuration.ProcessorConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::KerbalData.Configuration.ProcessorConfig GetItemAt(int index)
        {
            return ((global::KerbalData.Configuration.ProcessorConfig)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::KerbalData.Configuration.ProcessorConfig"/> with the specified key.
        /// </summary>
        /// <param name="index">The key of the <see cref="global::KerbalData.Configuration.ProcessorConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::KerbalData.Configuration.ProcessorConfig GetItemByKey(int index)
        {
            return ((global::KerbalData.Configuration.ProcessorConfig)(base.BaseGet(((object)(index)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace KerbalData.Configuration
{
    
    
    /// <summary>
    /// The ProcessorConfig Configuration Element.
    /// </summary>
    public partial class ProcessorConfig : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Index Property
        /// <summary>
        /// The XML name of the <see cref="Index"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IndexPropertyName = "index";
        
        /// <summary>
        /// Gets or sets the Index.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Index.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::KerbalData.Configuration.ProcessorConfig.IndexPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual int Index
        {
            get
            {
                return ((int)(base[global::KerbalData.Configuration.ProcessorConfig.IndexPropertyName]));
            }
            set
            {
                base[global::KerbalData.Configuration.ProcessorConfig.IndexPropertyName] = value;
            }
        }
        #endregion
        
        #region ModelType Property
        /// <summary>
        /// The XML name of the <see cref="ModelType"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ModelTypePropertyName = "modelType";
        
        /// <summary>
        /// Gets or sets the ModelType.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ModelType.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::KerbalData.Configuration.ProcessorConfig.ModelTypePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ModelType
        {
            get
            {
                return ((string)(base[global::KerbalData.Configuration.ProcessorConfig.ModelTypePropertyName]));
            }
            set
            {
                base[global::KerbalData.Configuration.ProcessorConfig.ModelTypePropertyName] = value;
            }
        }
        #endregion
        
        #region Serializer Property
        /// <summary>
        /// The XML name of the <see cref="Serializer"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SerializerPropertyName = "serializer";
        
        /// <summary>
        /// Gets or sets the Serializer.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Serializer.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::KerbalData.Configuration.ProcessorConfig.SerializerPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::KerbalData.Configuration.SerializerConfig Serializer
        {
            get
            {
                return ((global::KerbalData.Configuration.SerializerConfig)(base[global::KerbalData.Configuration.ProcessorConfig.SerializerPropertyName]));
            }
            set
            {
                base[global::KerbalData.Configuration.ProcessorConfig.SerializerPropertyName] = value;
            }
        }
        #endregion
        
        #region Converter Property
        /// <summary>
        /// The XML name of the <see cref="Converter"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ConverterPropertyName = "converter";
        
        /// <summary>
        /// Gets or sets the Converter.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Converter.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::KerbalData.Configuration.ProcessorConfig.ConverterPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::KerbalData.Configuration.ConverterConfig Converter
        {
            get
            {
                return ((global::KerbalData.Configuration.ConverterConfig)(base[global::KerbalData.Configuration.ProcessorConfig.ConverterPropertyName]));
            }
            set
            {
                base[global::KerbalData.Configuration.ProcessorConfig.ConverterPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace KerbalData.Configuration
{
    
    
    /// <summary>
    /// The SerializerConfig Configuration Element.
    /// </summary>
    public partial class SerializerConfig : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::KerbalData.Configuration.SerializerConfig.TypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::KerbalData.Configuration.SerializerConfig.TypePropertyName]));
            }
            set
            {
                base[global::KerbalData.Configuration.SerializerConfig.TypePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace KerbalData.Configuration
{
    
    
    /// <summary>
    /// The ConverterConfig Configuration Element.
    /// </summary>
    public partial class ConverterConfig : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::KerbalData.Configuration.ConverterConfig.TypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::KerbalData.Configuration.ConverterConfig.TypePropertyName]));
            }
            set
            {
                base[global::KerbalData.Configuration.ConverterConfig.TypePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace KerbalData.Configuration
{
    
    
    /// <summary>
    /// A collection of RepositoryConfig instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::KerbalData.Configuration.RepositoryConfig), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::KerbalData.Configuration.RepositoriesConfig.RepositoryConfigPropertyName)]
    public partial class RepositoriesConfig : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::KerbalData.Configuration.RepositoryConfig"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RepositoryConfigPropertyName = "repositoryConfig";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::KerbalData.Configuration.RepositoriesConfig.RepositoryConfigPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::KerbalData.Configuration.RepositoriesConfig.RepositoryConfigPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::KerbalData.Configuration.RepositoryConfig)(element)).Index;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::KerbalData.Configuration.RepositoryConfig"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::KerbalData.Configuration.RepositoryConfig"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::KerbalData.Configuration.RepositoryConfig();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::KerbalData.Configuration.RepositoryConfig"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::KerbalData.Configuration.RepositoryConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::KerbalData.Configuration.RepositoryConfig this[int index]
        {
            get
            {
                return ((global::KerbalData.Configuration.RepositoryConfig)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::KerbalData.Configuration.RepositoryConfig"/> with the specified key.
        /// </summary>
        /// <param name="index">The key of the <see cref="global::KerbalData.Configuration.RepositoryConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::KerbalData.Configuration.RepositoryConfig this[object index]
        {
            get
            {
                return ((global::KerbalData.Configuration.RepositoryConfig)(base.BaseGet(index)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::KerbalData.Configuration.RepositoryConfig"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="repositoryConfig">The <see cref="global::KerbalData.Configuration.RepositoryConfig"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::KerbalData.Configuration.RepositoryConfig repositoryConfig)
        {
            base.BaseAdd(repositoryConfig);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::KerbalData.Configuration.RepositoryConfig"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="repositoryConfig">The <see cref="global::KerbalData.Configuration.RepositoryConfig"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::KerbalData.Configuration.RepositoryConfig repositoryConfig)
        {
            base.BaseRemove(this.GetElementKey(repositoryConfig));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::KerbalData.Configuration.RepositoryConfig"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::KerbalData.Configuration.RepositoryConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::KerbalData.Configuration.RepositoryConfig GetItemAt(int index)
        {
            return ((global::KerbalData.Configuration.RepositoryConfig)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::KerbalData.Configuration.RepositoryConfig"/> with the specified key.
        /// </summary>
        /// <param name="index">The key of the <see cref="global::KerbalData.Configuration.RepositoryConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::KerbalData.Configuration.RepositoryConfig GetItemByKey(int index)
        {
            return ((global::KerbalData.Configuration.RepositoryConfig)(base.BaseGet(((object)(index)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace KerbalData.Configuration
{
    
    
    /// <summary>
    /// The RepositoryConfig Configuration Element.
    /// </summary>
    public partial class RepositoryConfig : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Index Property
        /// <summary>
        /// The XML name of the <see cref="Index"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IndexPropertyName = "index";
        
        /// <summary>
        /// Gets or sets the Index.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Index.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::KerbalData.Configuration.RepositoryConfig.IndexPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual int Index
        {
            get
            {
                return ((int)(base[global::KerbalData.Configuration.RepositoryConfig.IndexPropertyName]));
            }
            set
            {
                base[global::KerbalData.Configuration.RepositoryConfig.IndexPropertyName] = value;
            }
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::KerbalData.Configuration.RepositoryConfig.TypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::KerbalData.Configuration.RepositoryConfig.TypePropertyName]));
            }
            set
            {
                base[global::KerbalData.Configuration.RepositoryConfig.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::KerbalData.Configuration.RepositoryConfig.NamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::KerbalData.Configuration.RepositoryConfig.NamePropertyName]));
            }
            set
            {
                base[global::KerbalData.Configuration.RepositoryConfig.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Parameters Property
        /// <summary>
        /// The XML name of the <see cref="Parameters"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ParametersPropertyName = "parameters";
        
        /// <summary>
        /// Gets or sets the Parameters.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Parameters.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::KerbalData.Configuration.RepositoryConfig.ParametersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::KerbalData.Configuration.RepoParametersConfig Parameters
        {
            get
            {
                return ((global::KerbalData.Configuration.RepoParametersConfig)(base[global::KerbalData.Configuration.RepositoryConfig.ParametersPropertyName]));
            }
            set
            {
                base[global::KerbalData.Configuration.RepositoryConfig.ParametersPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace KerbalData.Configuration
{
    
    
    /// <summary>
    /// A collection of RepoParameterConfig instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::KerbalData.Configuration.RepoParameterConfig), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::KerbalData.Configuration.RepoParametersConfig.RepoParameterConfigPropertyName)]
    public partial class RepoParametersConfig : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::KerbalData.Configuration.RepoParameterConfig"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RepoParameterConfigPropertyName = "repoParameterConfig";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::KerbalData.Configuration.RepoParametersConfig.RepoParameterConfigPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::KerbalData.Configuration.RepoParametersConfig.RepoParameterConfigPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::KerbalData.Configuration.RepoParameterConfig)(element)).Key;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::KerbalData.Configuration.RepoParameterConfig"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::KerbalData.Configuration.RepoParameterConfig"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::KerbalData.Configuration.RepoParameterConfig();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::KerbalData.Configuration.RepoParameterConfig"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::KerbalData.Configuration.RepoParameterConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::KerbalData.Configuration.RepoParameterConfig this[int index]
        {
            get
            {
                return ((global::KerbalData.Configuration.RepoParameterConfig)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::KerbalData.Configuration.RepoParameterConfig"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::KerbalData.Configuration.RepoParameterConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::KerbalData.Configuration.RepoParameterConfig this[object key]
        {
            get
            {
                return ((global::KerbalData.Configuration.RepoParameterConfig)(base.BaseGet(key)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::KerbalData.Configuration.RepoParameterConfig"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="repoParameterConfig">The <see cref="global::KerbalData.Configuration.RepoParameterConfig"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::KerbalData.Configuration.RepoParameterConfig repoParameterConfig)
        {
            base.BaseAdd(repoParameterConfig);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::KerbalData.Configuration.RepoParameterConfig"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="repoParameterConfig">The <see cref="global::KerbalData.Configuration.RepoParameterConfig"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::KerbalData.Configuration.RepoParameterConfig repoParameterConfig)
        {
            base.BaseRemove(this.GetElementKey(repoParameterConfig));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::KerbalData.Configuration.RepoParameterConfig"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::KerbalData.Configuration.RepoParameterConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::KerbalData.Configuration.RepoParameterConfig GetItemAt(int index)
        {
            return ((global::KerbalData.Configuration.RepoParameterConfig)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::KerbalData.Configuration.RepoParameterConfig"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::KerbalData.Configuration.RepoParameterConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::KerbalData.Configuration.RepoParameterConfig GetItemByKey(string key)
        {
            return ((global::KerbalData.Configuration.RepoParameterConfig)(base.BaseGet(((object)(key)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace KerbalData.Configuration
{
    
    
    /// <summary>
    /// The RepoParameterConfig Configuration Element.
    /// </summary>
    public partial class RepoParameterConfig : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::KerbalData.Configuration.RepoParameterConfig.ValuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Value
        {
            get
            {
                return ((string)(base[global::KerbalData.Configuration.RepoParameterConfig.ValuePropertyName]));
            }
            set
            {
                base[global::KerbalData.Configuration.RepoParameterConfig.ValuePropertyName] = value;
            }
        }
        #endregion
        
        #region Key Property
        /// <summary>
        /// The XML name of the <see cref="Key"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string KeyPropertyName = "key";
        
        /// <summary>
        /// Gets or sets the Key.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Key.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::KerbalData.Configuration.RepoParameterConfig.KeyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Key
        {
            get
            {
                return ((string)(base[global::KerbalData.Configuration.RepoParameterConfig.KeyPropertyName]));
            }
            set
            {
                base[global::KerbalData.Configuration.RepoParameterConfig.KeyPropertyName] = value;
            }
        }
        #endregion
    }
}
